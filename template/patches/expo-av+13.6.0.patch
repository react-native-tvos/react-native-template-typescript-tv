diff --git a/node_modules/expo-av/ios/EXAV.podspec b/node_modules/expo-av/ios/EXAV.podspec
index e09e422..96fe60f 100644
--- a/node_modules/expo-av/ios/EXAV.podspec
+++ b/node_modules/expo-av/ios/EXAV.podspec
@@ -10,7 +10,7 @@ Pod::Spec.new do |s|
   s.license        = package['license']
   s.author         = package['author']
   s.homepage       = package['homepage']
-  s.platform       = :ios, '13.0'
+  s.platforms      = { :ios => '13.0', :tvos => '13.0' }
   s.source         = { git: 'https://github.com/expo/expo.git' }
   s.static_framework = true
 
@@ -28,5 +28,6 @@ Pod::Spec.new do |s|
     s.vendored_frameworks = "#{s.name}.xcframework"
   else
     s.source_files = "#{s.name}/**/*.{h,m,mm,swift}"
+    s.tvos.exclude_files = "#{s.name}/**/EXAudioRecordingPermissionRequester.{h,m}"
   end
 end
diff --git a/node_modules/expo-av/ios/EXAV/EXAV.m b/node_modules/expo-av/ios/EXAV/EXAV.m
index 48e8c4e..124896e 100644
--- a/node_modules/expo-av/ios/EXAV/EXAV.m
+++ b/node_modules/expo-av/ios/EXAV/EXAV.m
@@ -13,7 +13,9 @@
 #import <EXAV/EXAV.h>
 #import <EXAV/EXAVPlayerData.h>
 #import <EXAV/EXVideoView.h>
+#if !TARGET_OS_TV
 #import <EXAV/EXAudioRecordingPermissionRequester.h>
+#endif
 #import <EXAV/EXAV+AudioSampleCallback.h>
 
 NSString *const EXAudioRecordingOptionsIsMeteringEnabledKey = @"isMeteringEnabled";
@@ -58,7 +60,9 @@ NSString *const EXDidUpdateMetadataEventName = @"didUpdateMetadata";
 
 @property (nonatomic, strong) NSString *audioRecorderFilename;
 @property (nonatomic, strong) NSDictionary *audioRecorderSettings;
+#if !TARGET_OS_TV
 @property (nonatomic, strong) AVAudioRecorder *audioRecorder;
+#endif
 @property (nonatomic, assign) BOOL audioRecorderIsPreparing;
 @property (nonatomic, assign) BOOL audioRecorderShouldBeginRecording;
 
@@ -100,7 +104,9 @@ EX_EXPORT_MODULE(ExponentAV);
     
     _audioRecorderFilename = nil;
     _audioRecorderSettings = nil;
+#if !TARGET_OS_TV
     _audioRecorder = nil;
+#endif
     _audioRecorderIsPreparing = false;
     _audioRecorderShouldBeginRecording = false;
     _audioRecorderDurationMillis = 0;
@@ -151,7 +157,9 @@ EX_EXPORT_MODULE(ExponentAV);
   }
   [[_expoModuleRegistry getModuleImplementingProtocol:@protocol(EXAppLifecycleService)] registerAppLifecycleListener:self];
   _permissionsManager = [_expoModuleRegistry getModuleImplementingProtocol:@protocol(EXPermissionsInterface)];
+#if !TARGET_OS_TV
   [EXPermissionsMethodsDelegate registerRequesters:@[[EXAudioRecordingPermissionRequester new]] withPermissionsManager:_permissionsManager];
+#endif
 }
 
 - (void)onAppForegrounded
@@ -267,11 +275,15 @@ EX_EXPORT_MODULE(ExponentAV);
   } else if (!playsInSilentMode && shouldPlayInBackground) {
     return EXErrorWithMessage(@"Impossible audio mode: playsInSilentMode == false and staysActiveInBackground == true cannot be set on iOS.");
   } else {
+#if TARGET_OS_TV
+    allowsRecording = NO;
+#else
     if (!allowsRecording) {
       if (_audioRecorder && [_audioRecorder isRecording]) {
         [_audioRecorder pause];
       }
     }
+#endif
 
     _playsInSilentMode = playsInSilentMode;
     _audioInterruptionMode = interruptionMode;
@@ -318,10 +330,12 @@ EX_EXPORT_MODULE(ExponentAV);
     return nil;
   }
 
+#if !TARGET_OS_TV
   if (_allowsAudioRecording) {
     // Bluetooth input is only available when recording is allowed
     requiredAudioCategoryOptions = requiredAudioCategoryOptions | AVAudioSessionCategoryOptionAllowBluetooth;
   }
+#endif
 
   return [_kernelAudioSessionManagerDelegate setCategory:requiredAudioCategory withOptions:requiredAudioCategoryOptions forModule:self];
 }
@@ -337,6 +351,7 @@ EX_EXPORT_MODULE(ExponentAV);
     }
   }];
 
+#if !TARGET_OS_TV
   if (_audioRecorder) {
     if (_audioRecorderShouldBeginRecording || [_audioRecorder isRecording]) {
       audioSessionModeRequired = EXAVAudioSessionModeActive;
@@ -344,6 +359,7 @@ EX_EXPORT_MODULE(ExponentAV);
       audioSessionModeRequired = EXAVAudioSessionModeActiveMuted;
     }
   }
+#endif
 
   return audioSessionModeRequired;
 }
@@ -389,9 +405,11 @@ EX_EXPORT_MODULE(ExponentAV);
   [self _runBlockForAllAVObjects:^(NSObject<EXAVObject> *exAVObject) {
     [exAVObject pauseImmediately];
   }];
+#if !TARGET_OS_TV
   if (_audioRecorder && [_audioRecorder isRecording]) {
     [_audioRecorder pause];
   }
+#endif
 
   NSError *error = [_kernelAudioSessionManagerDelegate setActive:NO forModule:self];
   
@@ -571,6 +589,7 @@ withEXVideoViewForTag:(nonnull NSNumber *)reactTag
   _audioRecorderSettings = recorderSettings;
 }
 
+#if !TARGET_OS_TV
 - (NSError *)_createNewAudioRecorder
 {
   if (_audioRecorder) {
@@ -653,6 +672,7 @@ withEXVideoViewForTag:(nonnull NSNumber *)reactTag
     _audioRecorderDurationMillis = 0;
   }
 }
+#endif
 
 - (NSArray<NSString *> *)supportedEvents
 {
@@ -856,20 +876,28 @@ EX_EXPORT_METHOD_AS(getPermissionsAsync,
                     getPermissionsAsync:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   [EXPermissionsMethodsDelegate getPermissionWithPermissionsManager:_permissionsManager
                                                       withRequester:[EXAudioRecordingPermissionRequester class]
                                                             resolve:resolve
                                                              reject:reject];
+#endif
 }
 
 EX_EXPORT_METHOD_AS(requestPermissionsAsync,
                     requestPermissionsAsync:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   [EXPermissionsMethodsDelegate askForPermissionWithPermissionsManager:_permissionsManager
                                                          withRequester:[EXAudioRecordingPermissionRequester class]
                                                                resolve:resolve
                                                                 reject:reject];
+#endif
 }
 
 EX_EXPORT_METHOD_AS(prepareAudioRecorder,
@@ -877,6 +905,9 @@ EX_EXPORT_METHOD_AS(prepareAudioRecorder,
                     resolver:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   _mediaServicesDidReset = false;
   if (![_permissionsManager hasGrantedPermissionUsingRequesterClass:[EXAudioRecordingPermissionRequester class]]) {
     reject(@"E_MISSING_PERMISSION", @"Missing audio recording permission.", nil);
@@ -917,12 +948,16 @@ EX_EXPORT_METHOD_AS(prepareAudioRecorder,
   } else {
     reject(@"E_AUDIO_RECORDERNOTCREATED", [NSString stringWithFormat:@"Prepare encountered an error: %@", error.description], error);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(startAudioRecording,
                     startAudioRecording:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   if (![_permissionsManager hasGrantedPermissionUsingRequesterClass:[EXAudioRecordingPermissionRequester class]]) {
     reject(@"E_MISSING_PERMISSION", @"Missing audio recording permission.", nil);
     return;
@@ -948,12 +983,16 @@ EX_EXPORT_METHOD_AS(startAudioRecording,
     }
   }
   _audioRecorderShouldBeginRecording = false;
+#endif
 }
 
 EX_EXPORT_METHOD_AS(pauseAudioRecording,
                     pauseAudioRecording:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   if ([self _checkAudioRecorderExistsOrReject:reject]) {
     if (_audioRecorder.recording) {
       [_audioRecorder pause];
@@ -964,12 +1003,16 @@ EX_EXPORT_METHOD_AS(pauseAudioRecording,
     }
     resolve([self _getAudioRecorderStatus]);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(stopAudioRecording,
                     stopAudioRecording:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   if ([self _checkAudioRecorderExistsOrReject:reject]) {
     _audioRecorderDurationMillis = [self _getDurationMillisOfRecordingAudioRecorder];
     if (_audioRecorder.recording) {
@@ -981,31 +1024,43 @@ EX_EXPORT_METHOD_AS(stopAudioRecording,
 
     resolve([self _getAudioRecorderStatus]);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(getAudioRecordingStatus,
                     getAudioRecordingStatus:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   if ([self _checkAudioRecorderExistsOrReject:reject]) {
     resolve([self _getAudioRecorderStatus]);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(unloadAudioRecorder,
                     unloadAudioRecorder:(EXPromiseResolveBlock)resolve
                     rejecter:(EXPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   if ([self _checkAudioRecorderExistsOrReject:reject]) {
     [self _removeAudioRecorder:YES];
     resolve(nil);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(getAvailableInputs,
                     resolver:(UMPromiseResolveBlock)resolve
                     rejecter:(UMPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   NSMutableArray *inputs = [NSMutableArray new];
   for (AVAudioSessionPortDescription *desc in [_kernelAudioSessionManagerDelegate availableInputs]){
     [inputs addObject: @{
@@ -1015,12 +1070,16 @@ EX_EXPORT_METHOD_AS(getAvailableInputs,
     }];
   }
   resolve(inputs);
+#endif
 }
 
 EX_EXPORT_METHOD_AS(getCurrentInput,
                     getCurrentInput:(UMPromiseResolveBlock)resolve
                     rejecter:(UMPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   AVAudioSessionPortDescription *desc = [_kernelAudioSessionManagerDelegate activeInput];
   if (desc) {
     resolve(@{
@@ -1031,6 +1090,7 @@ EX_EXPORT_METHOD_AS(getCurrentInput,
   } else {
     reject(@"E_AUDIO_GETCURRENTINPUT", @"No input port found.", nil);
   }
+#endif
 }
 
 EX_EXPORT_METHOD_AS(setInput,
@@ -1038,6 +1098,9 @@ EX_EXPORT_METHOD_AS(setInput,
                     resolver:(UMPromiseResolveBlock)resolve
                     rejecter:(UMPromiseRejectBlock)reject)
 {
+#if TARGET_OS_TV
+  reject(@"E_MISSING_PERMISSION", @"Not available on TV", nil);
+#else
   AVAudioSessionPortDescription* preferredInput = nil;
   for (AVAudioSessionPortDescription *desc in [_kernelAudioSessionManagerDelegate availableInputs]){
     if ([desc.UID isEqualToString:input]) {
@@ -1050,6 +1113,7 @@ EX_EXPORT_METHOD_AS(setInput,
   } else {
     reject(@"E_AUDIO_SETINPUT_FAIL", [NSString stringWithFormat:@"Preferred input '%@' not found!", input], nil);
   }
+#endif
 }
 
 - (dispatch_queue_t)methodQueue
@@ -1071,7 +1135,9 @@ EX_EXPORT_METHOD_AS(setInput,
     [video pauseImmediately];
     [_videoSet removeObject:video];
   }
+#if !TARGET_OS_TV
   [self _removeAudioRecorder:YES];
+#endif
   for (NSNumber *key in [_soundDictionary allKeys]) {
     [self _removeSoundForKey:key];
   }
