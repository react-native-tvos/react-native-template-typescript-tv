diff --git a/node_modules/expo-modules-core/ExpoModulesCore.podspec b/node_modules/expo-modules-core/ExpoModulesCore.podspec
index d92f3dd..8387b0f 100644
--- a/node_modules/expo-modules-core/ExpoModulesCore.podspec
+++ b/node_modules/expo-modules-core/ExpoModulesCore.podspec
@@ -27,7 +27,7 @@ Pod::Spec.new do |s|
   s.license        = package['license']
   s.author         = package['author']
   s.homepage       = package['homepage']
-  s.platform       = :ios, '13.0'
+  s.platforms       = { :ios => '13.0', :tvos => '13.0'}
   s.swift_version  = '5.4'
   s.source         = { git: 'https://github.com/expo/expo.git' }
   s.static_framework = true
diff --git a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
index 20c8af4..be25c65 100644
--- a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
+++ b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
@@ -202,6 +202,7 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
     }
   }
 
+#if !os(tvOS)
   open func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -> Void) {
     let selector = #selector(application(_:performActionFor:completionHandler:))
     let subs = subscribers.filter { $0.responds(to: selector) }
@@ -228,6 +229,7 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
       }
     }
   }
+  #endif
 
   // MARK: - Background Fetch
 
@@ -294,6 +296,7 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
    * Sets allowed orientations for the application. It will use the values from `Info.plist`as the orientation mask unless a subscriber requested
    * a different orientation.
    */
+  #if !os(tvOS)
   public func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
     let deviceOrientationMask = allowedOrientations(for: UIDevice.current.userInterfaceIdiom)
     let universalOrientationMask = allowedOrientations(for: .unspecified)
@@ -312,6 +315,7 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
     }
     return parsedSubscribers.isEmpty ? infoPlistOrientations : subscribersMask
   }
+  #endif
 
   // MARK: - Statics
 
@@ -346,7 +350,7 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
       }
   }
 }
-
+#if !os(tvOS)
 private func allowedOrientations(for userInterfaceIdiom: UIUserInterfaceIdiom) -> UIInterfaceOrientationMask {
   // For now only iPad-specific orientations are supported
   let deviceString = userInterfaceIdiom == .pad ? "~pad" : ""
@@ -371,3 +375,4 @@ private func allowedOrientations(for userInterfaceIdiom: UIUserInterfaceIdiom) -
   }
   return mask
 }
+#endif
diff --git a/node_modules/expo-modules-core/ios/Interfaces/BarcodeScanner/EXBarcodeScannerInterface.h b/node_modules/expo-modules-core/ios/Interfaces/BarcodeScanner/EXBarcodeScannerInterface.h
index cdd27c4..e262aae 100644
--- a/node_modules/expo-modules-core/ios/Interfaces/BarcodeScanner/EXBarcodeScannerInterface.h
+++ b/node_modules/expo-modules-core/ios/Interfaces/BarcodeScanner/EXBarcodeScannerInterface.h
@@ -6,6 +6,7 @@
 
 @protocol EXBarCodeScannerInterface
 
+#if !TARGET_OS_TV
 - (void)setSession:(AVCaptureSession *)session;
 - (void)setSessionQueue:(dispatch_queue_t)sessionQueue;
 - (void)setOnBarCodeScanned:(void (^)(NSDictionary *))onBarCodeScanned;
@@ -17,5 +18,6 @@
 
 - (void)maybeStartBarCodeScanning;
 - (void)stopBarCodeScanning;
+#endif
 
 @end
diff --git a/node_modules/expo-modules-core/ios/Interfaces/Camera/EXCameraInterface.h b/node_modules/expo-modules-core/ios/Interfaces/Camera/EXCameraInterface.h
index 3b594f2..e9fdfa4 100644
--- a/node_modules/expo-modules-core/ios/Interfaces/Camera/EXCameraInterface.h
+++ b/node_modules/expo-modules-core/ios/Interfaces/Camera/EXCameraInterface.h
@@ -4,7 +4,9 @@
 
 @protocol EXCameraInterface
 
+#if !TARGET_OS_TV
 @property (nonatomic, strong) dispatch_queue_t sessionQueue;
 @property (nonatomic, strong) AVCaptureSession *session;
+#endif
 
 @end
diff --git a/node_modules/expo-modules-core/ios/Interfaces/FaceDetector/EXFaceDetectorManagerInterface.h b/node_modules/expo-modules-core/ios/Interfaces/FaceDetector/EXFaceDetectorManagerInterface.h
index c60e262..fc1b5e0 100644
--- a/node_modules/expo-modules-core/ios/Interfaces/FaceDetector/EXFaceDetectorManagerInterface.h
+++ b/node_modules/expo-modules-core/ios/Interfaces/FaceDetector/EXFaceDetectorManagerInterface.h
@@ -5,7 +5,7 @@
 #import <UIKit/UIKit.h>
 
 @protocol EXFaceDetectorManagerInterface
-
+#if !TARGET_OS_TV
 - (void)setSessionQueue:(dispatch_queue_t)sessionQueue;
 - (void)setIsEnabled:(BOOL)enabled;
 - (void)setOnFacesDetected:(void (^)(NSArray<NSDictionary *> *))onFacesDetected;
@@ -16,5 +16,5 @@
 - (void)maybeStartFaceDetectionOnSession:(AVCaptureSession *)session withPreviewLayer:(AVCaptureVideoPreviewLayer *)previewLayer;
 - (void)maybeStartFaceDetectionOnSession:(AVCaptureSession *)session withPreviewLayer:(AVCaptureVideoPreviewLayer *)previewLayer mirrored:(BOOL) mirrored;
 - (void)stopFaceDetection;
-
+#endif
 @end
